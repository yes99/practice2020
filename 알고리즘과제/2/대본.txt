안녕하세요 임베디드 프로그래밍, 라즈베리 파이를 이용한 채팅 게임 소프트웨어를 만들기로 한 
신민규 이현석 입니다. 

우선 저희는 지난시간에 발표했던 것처럼  채팅 프로그램을 베이스로 해서 거기에 간단히 즐길수 있는 단어게임을 만들기로 했습ㄴ다. 

보시는 바와 같이 크게 기획단계는 채팅 프로그램과 다양한 단어게임으로 나뉘고 있고요

소켓연결과정은 다음과 같이 해서 인터넷 소켓을 이용해서 클라이언트 - 서버 연결을 하는 식으로 진행을 했습니다. 

우선 저희는 기획과정에 있어서 qt gui를 들어가기 이전에 전체적인 흐름이나 맥락을 잡기 위해서 우선
씨 언어로 전체적인 저희의 구상에 대한 코딩을 했습니다. 

보시는 바와 같이 클라이언트 소켓이고, 그 오른쪽에는 이 프로그램은 클라이언트 위주로 돌아갑니다. 클라이언트는 직접 스캔을 받아가지고 메뉴를 고를 수있습니다. 아 참고로 라이트를 해서 같은 숫자를 서버로도 보내주죠

자 여기 보시는 채팅은보시면 이제 클라이언트가 시작을 하는 거로 나오죠. 먼저 보내고 이제 서버에서도 답을 보내고. 그런데 이게 저희가 멀티 스레딩을 쓰지 않고 정말 간단하게 일방통행으로 만들어 가지고 한번에 한명이 한번박에 말하지 못해요. 이게 뒤에서 게임만드는데 있어서는 나름 도움이 되는 연출이었습니다. 

숫자 야구 같은 경우에는, 여기는 나오지 않지만 서버쪽에서 문제를 내고 여기서 와일문을 무한으로 돌면서 정확히는 9번 돌면서 숫자를 맞췄는지 맞추지 못했는지를 보여주는 부분이고요

행맨도 숫자야구와 같은 방식으로 와일문을 돌면서 내가 특정 알파벳을 찾았나 못찾았나를 보여줍니다. 

끝말잇기는 이제 서버랑 대결을 하게 된느 부분인데 여기 보시면 가장 핵심되는 부분은 여기 이프문이죠. 아 오른쪽에서 -2를 해주는 이유는 우리가 단어를 입력할때 마지막에 찌꺼기 값이 하나 들어갑니다. 

369같은 경우에는 연산만 많은데요, 여기서는 클라이언트가 처음 시작 하고 싶은 값을 고를 수있고요, 그리고 여기 abc를 통해서 박수를 몇번 칠수 잇는가르 ㄹ먼저 연산을 합니다. 그리고 그 연산을 토대로 오른쪽에 보시면 case에 각각 박수에 맞게 입력을 하면 라이트로 상대방 한테 다음 숫자를 전달하게 되죠. 

서버쪽은 이제 뭐 똑같습니다. 아까처럼 처음에 소케 ㅅ연결한것 처럼 과정이 좀 추가 되고요, 그리고 서버 선택창

채팅은 이제 클라가 먼저 보냇으니 여기서는 리드 부터 시작하고

끝말잇기도 똑같이 가정문이 핵심이죠. 아 끝말잇기 그리고 369 같은 경우에는 같은 룰을 가지고 서버랑, 클라이언트가 대결을 하는 것 이기때문에 특별히 코드가 다르지는 않습니다. 

그리고 숫자야구는 서버측에서 문제를 내고 채점을 해주는 과정이라는 점에서 좀 다르고
이는 행맨에서도 마찬가지입니다. 

기획 단계에서는 크게 두가지를 준비했죠. 같은 룰을 가지고 서버랑 클라이언트가 대결을 할수 있느냐? 아니면 서버가 문제 출제자가 되어서 클라이언트가 맞추느냐 이 두가지였죠

네 구동결과는 이렇게 야구 나오고, 그리고 행맨
끝말 잇기 같은 경우에는, 이제 보시다 싶히 fast travel lake이런식으로 이어가죠. dad 에다가 다른소리 쓰니까 다시 하라고 하고요
그 오른쪽은 그냥 채팅입니다.


그래서 이런식으로 알고리즘을 다 구상과 구동을 확인을 하고
위와같은 모양으로 gui를 작성하려고 했습니다. 
이제 저희 계획은 ip주소 포트를 입력시키고 그리고 채팅은 아래서 보내고, 또 오른쪽 라디오 버튼을 누르면, 이제 #game1이런식으로 문자가 보내져서 

그것을 contain하고 잇는지를 함수로 확인을 해서 해당 게임을 구동하는 함수로 넘어가는 식으로요
그렇게 해서 이렇게 구동을 한다 라느 ㄴ계획어었스빈다. 

오른쪽은 이제 클라이언트에 대한거고요. 클라이언트에서는이제 대부분의 것들을 온 클릭 버튼쪽에서 해결했음이 보이죠? 일단 온 클릭을 해ㅑㅇ지 라이트 해서 서버측에 다가 보낼수 있으니까요

서버 측에서는 이제 가장 중요한 부분이 readyread쪽 일 것 입니다. 여기 보시면 canread를 통해서 클라가 보낸것을 항상 읽을수 잇는 시점에서 연산을 처리하고 함수로 넘어가 달라 그런 이야기였죠. 

하지만 처음에 C로 구상항것과는 다르게 qt쪽에서는 문제가 있었습니다. 

한문장으로 정리하면 qt gui에 대한 전반적인 이해가 좀 부족했습니다. 

우선 기존에 공부한 씨나 파이썬과는 다르게 큐티 소켓이 돌아갑니다. 큐티를 이용한 네트워크에 대한 이해가 부족해서, 저희가 함수를 통해서 게임에 진입하면 소켓과의 연결이 끊어지는 등 문제가 ㅁ낳았습니다. 

목표설정에 있어서도, 다양한 게임ㅇ르 구상하려고 한것이 너무 욕심이 아니었나 싶습니다. 한가지 목표에 집중을 하는 것이 나았고, 

gui에 있어서도 특이성을 미리 알았어야 했습니다. 기존에 파이선에서 했더 ㄴgui를 생각하고 무작정 일단 C로 코딩을 한다음에 그 기반을 통해서 하는 것이라고 생각을 했지만, 좀 달랐습니다. qt gui만의 독특한 특이성과 독특한 클래스, 그리고 qt만의 변수등을 이해하지 못하고 코딩을 해서 

abortion, segement 등등의 오류를 많이 맞이했습니다. 

다음에 기회가 된다면, 그때는 라즈베리 파이, 임베디드, 그리고 c++, 크로스 컴파일이면 당연히 큐티겠구나 라고 생각을 미리하고, 제작에 착수하겠습니다. 